---
import Tags from "../shared/Tags.astro";

interface Props {
  title: string;
  description?: string;
  url: string;
  date?: Date;
  tags?: string[];
  thumbnail?: string | null;
}

const { title, description, url, date, tags, thumbnail } = Astro.props;

const formatDate = (date: Date | undefined) => {
  if (!date) return "";
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
};
---

<article>
  <div class="article-content">
    <div class="text-content">
      <div class="title-row">
        <a href={url}>{title}</a>
      </div>
      {description && <p class="muted-text">{description}</p>}
      <div class="article-footer">
        {tags && tags.length > 0 && (
          <Tags tags={tags} />
        )}
        {!thumbnail && date && <time datetime={date.toISOString()}>{formatDate(date)}</time>}
      </div>
    </div>
    {thumbnail && (
      <div class="thumbnail-side">
        <div class="thumbnail-container">
          <img src={thumbnail} alt={title} loading="lazy" />
        </div>
        {date && (
          <time class="thumbnail-date" datetime={date.toISOString()}>
            {formatDate(date)}
          </time>
        )}
      </div>
    )}
  </div>
</article>

<style>
  article {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    transition: var(--transition-base);
  }

  article:last-child {
    border-bottom: none;
  }

  .article-content {
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
  }

  .text-content {
    flex: 1;
    min-width: 0; /* 防止flex子项溢出 */
  }

  .thumbnail-side {
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .thumbnail-container {
    width: 120px;
    height: 80px;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--surface-color);
  }

  .thumbnail-date {
    font-size: var(--text-xs);
    color: var(--text-muted);
    white-space: nowrap;
  }

  .thumbnail-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  article:hover .thumbnail-container img {
    transform: scale(1.05);
  }

  .title-row {
    display: flex;
    align-items: baseline;
    margin-bottom: 0.5rem;
  }
  
  .title-row a {
    font-size: var(--text-2xl);
    font-weight: 600;
    text-decoration: none;
    color: var(--text-color);
    line-height: 1.3;
    transition: color var(--transition-base);
  }
  
  .title-row a:hover {
    color: var(--primary-color);
  }
  
  .muted-text {
    color: var(--text-muted);
    font-size: var(--text-sm);
    line-height: 1.5;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .article-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    gap: 1rem;
  }

  
  time {
    text-align: right;
    font-size: var(--text-xs);
    color: var(--text-muted);
    white-space: nowrap;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    font-size: var(--text-xs);
  }
  
  .tags span {
    color: var(--text-muted);
    padding: 0.2rem 0.5rem;
    border-radius: var(--radius-full);
    background-color: var(--hover-bg);
  }

  /* 响应式设计 */
  @media (max-width: 640px) {
    .article-content {
      flex-direction: column;
      gap: 1rem;
    }

    .thumbnail-side {
      order: -1; /* 在手机端将图片放到顶部 */
      align-items: stretch;
    }

    .thumbnail-container {
      width: 100%;
      height: 160px;
    }

    .thumbnail-date {
      text-align: center;
      margin-top: 0.25rem;
    }

    .muted-text {
      -webkit-line-clamp: 3;
    }
  }

  @media (max-width: 480px) {
    article {
      padding: 1rem;
    }

    .article-content {
      gap: 0.75rem;
    }

    .thumbnail-side .thumbnail-container {
      height: 140px;
    }

    .title-row a {
      font-size: var(--text-xl);
    }
  }
</style>
