---
import "../../styles/theme.css";
import "../../styles/animations.css";
import "../../styles/global.css";

import "@fontsource/inter/300.css";
import "@fontsource/inter/400.css";
import "@fontsource/inter/500.css";
import "@fontsource/roboto-mono/400.css";

import interLightWoff2 from "@fontsource/inter/files/inter-latin-300-normal.woff2?url";
import interRegularWoff2 from "@fontsource/inter/files/inter-latin-400-normal.woff2?url";
import interMediumWoff2 from "@fontsource/inter/files/inter-latin-500-normal.woff2?url";
import robotoMonoRegularWoff2 from "@fontsource/roboto-mono/files/roboto-mono-latin-400-normal.woff2?url";
import { ClientRouter, ViewTransitions } from "astro:transitions";
import Navigation from "../shared/Navigation.astro";
import "../../../node_modules/@fontsource/inter/index.css";
import "../../../node_modules/@fontsource/inter/300.css";
import "../../../node_modules/@fontsource/inter/400.css";
import "../../../node_modules/@fontsource/inter/500.css";
import "../../../node_modules/@fontsource/roboto-mono/index.css";
import "../../styles/index.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  canonicalURL?: string;
}

const { title, description, image = "/default-og-image.jpg", canonicalURL = Astro.url } = Astro.props;
---

<!doctype html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Preload critical fonts -->
    <link rel="preload" href={interLightWoff2} as="font" type="font/woff2" crossorigin="anonymous" />
    <link rel="preload" href={interRegularWoff2} as="font" type="font/woff2" crossorigin="anonymous" />
    <link rel="preload" href={interMediumWoff2} as="font" type="font/woff2" crossorigin="anonymous" />
    <link rel="preload" href={robotoMonoRegularWoff2} as="font" type="font/woff2" crossorigin="anonymous" />

    <link rel="canonical" href={canonicalURL} />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ClientRouter />
    <ViewTransitions />
    <script is:inline>
      // 从localStorage获取主题
      const theme = localStorage.getItem('theme') || 'light';
      document.documentElement.setAttribute("data-theme", theme);

      // 处理视图转换期间的主题持久性
      document.addEventListener("astro:before-swap", (ev) => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        ev.newDocument.documentElement.setAttribute("data-theme", currentTheme);
      });

      // 添加初始加载类
      document.addEventListener("DOMContentLoaded", () => {
        document.body.classList.add("initial-load");
        setTimeout(() => {
          document.body.classList.remove("initial-load");
          document.documentElement.classList.add("theme-transition");
        }, 1000);
      });
    </script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css">
  </head>
  <body>
    <div class="top-glow" transition:persist></div>
    <main class="main-content">
      <div class="nav-container">
        <Navigation />
      </div>
      <div class="content-wrapper">
        <slot />
      </div>
    </main>
    <div class="bottom-glow" transition:persist></div>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-typescript.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-bash.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-jsx.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-tsx.min.js"></script>
    <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-css.min.js"></script>
      <script is:inline src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-yaml.min.js"></script>
  
  <!-- Mermaid 初始化脚本 -->
  <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      if (typeof mermaid !== 'undefined') {
        mermaid.initialize({
          startOnLoad: true,
          theme: document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'default',
          securityLevel: 'loose',
          fontFamily: 'Inter, sans-serif',
        });
      }
    });

    // 处理主题变化
    const observer = new MutationObserver(() => {
      if (typeof mermaid !== 'undefined') {
        const theme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'default';
        mermaid.initialize({ theme });
        try {
          mermaid.init(undefined, document.querySelectorAll('.mermaid'));
        } catch (e) {
          console.error('Mermaid 渲染错误:', e);
        }
      }
    });
    
    // 监听html元素的data-theme属性变化
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });

    // 页面转换后重新渲染
    document.addEventListener('astro:page-load', () => {
      if (typeof mermaid !== 'undefined') {
        try {
          mermaid.init(undefined, document.querySelectorAll('.mermaid'));
        } catch (e) {
          console.error('Mermaid 页面加载错误:', e);
        }
      }
    });
  </script>
</body>
</html>

<style>
  main {
    width: 100%;
    max-width: 100%;
    padding: 0;
    margin: 0;
    position: relative;
  }
  
  /* 添加响应式内边距 */
  .content-wrapper {
    width: 100%;
    max-width: 100%;
    padding: 0 1.5rem;
    box-sizing: border-box;
  }
  
  /* 平板设备增加内边距 */
  @media (min-width: 768px) {
    .content-wrapper {
      padding: 0 10%;
    }
  }
  
  /* 桌面端使用15%的左右间距，使内容占70% */
  @media (min-width: 1024px) {
    .content-wrapper {
      padding: 0 15%;
    }
  }
  
  /* 超宽屏幕设置最大宽度 */
  @media (min-width: 1920px) {
    .content-wrapper {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
    }
  }
  
  /* 确保博客页面也应用相同的间距规则 */
  :global(body:has(#blog-article) .content-wrapper) {
    padding: inherit;
  }
</style>
