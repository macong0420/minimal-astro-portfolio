<button id="theme-toggle" aria-label="切换主题" title="切换主题">
  <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <circle cx="12" cy="12" r="5"/>
    <line x1="12" y1="1" x2="12" y2="3"/>
    <line x1="12" y1="21" x2="12" y2="23"/>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
    <line x1="1" y1="12" x2="3" y2="12"/>
    <line x1="21" y1="12" x2="23" y2="12"/>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
  </svg>
  <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
</button>

<style>
  #theme-toggle {
    border: none;
    background: var(--hover-bg);
    padding: 0.5rem;
    border-radius: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
    transition: all 0.2s ease;
  }

  #theme-toggle:hover {
    background: var(--surface-color);
  }

  .sun-icon,
  .moon-icon {
    transition: transform 0.2s ease;
  }

  [data-theme="dark"] .sun-icon {
    display: block;
  }

  [data-theme="dark"] .moon-icon {
    display: none;
  }

  [data-theme="light"] .sun-icon {
    display: none;
  }

  [data-theme="light"] .moon-icon {
    display: block;
  }

  .sun-icon,
  .moon-icon {
    width: 20px;
    height: 20px;
  }
</style>

<script>
  // 定义一个函数来处理主题切换
  function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const root = document.documentElement;
    
    // 从localStorage读取主题设置
    const theme = localStorage.getItem('theme') || 'light';
    root.setAttribute('data-theme', theme);

    themeToggle?.addEventListener('click', () => {
      const currentTheme = root.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      root.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
    });
  }

  // 页面加载时初始化
  document.addEventListener('DOMContentLoaded', setupThemeToggle);
  
  // 处理Astro视图转换
  document.addEventListener('astro:page-load', setupThemeToggle);
  
  // 确保在视图转换前保存当前主题
  document.addEventListener('astro:before-swap', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    if (currentTheme) {
      localStorage.setItem('theme', currentTheme);
    }
  });
</script>
